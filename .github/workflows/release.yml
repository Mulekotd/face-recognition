name: Build and Release Face Recognition

on:
  push:
    tags:
      - "v*.*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set lowercase OS
        id: osname
        run: |
          echo "os_lower=$(echo '${{ runner.os }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.os == 'Linux' && '~/.cache/pip' || '' }}
            ${{ runner.os == 'macOS' && '~/Library/Caches/pip' || '' }}
            ${{ runner.os == 'Windows' && '~\\AppData\\Local\\pip\\Cache' || '' }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            build-essential \
            libboost-all-dev \
            libopenblas-dev \
            liblapack-dev \
            libx11-dev \
            python3-dev

      - name: Install system dependencies (Windows only)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes
          choco install visualstudio2022buildtools --confirm --install-arguments "--quiet --norestart --wait"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install pyinstaller
          pip install --prefer-binary -r requirements.txt

      - name: Build with PyInstaller on Windows
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile --name face-recognition --add-data "models;models" --add-data "database;database" main.py

      - name: Build with PyInstaller on Unix
        if: runner.os != 'Windows'
        run: |
          pyinstaller --onefile --name face-recognition --add-data "models:models" --add-data "database:database" main.py

      - name: Set release version
        id: vars
        run: |
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Package build on Windows
        if: runner.os == 'Windows'
        run: |
          mkdir package
          cp dist/face-recognition.exe package/
          $filename = "face-recognition-${env:VERSION}-${env:os_lower}.zip"
          Compress-Archive -Path package\* -DestinationPath $filename

      - name: Package build on Unix
        if: runner.os != 'Windows'
        run: |
          mkdir package
          cp dist/face-recognition package/
          tar -czvf face-recognition-${{ env.VERSION }}-${{ env.os_lower }}.tar.gz -C package .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.os_lower }}-artifact
          path: |
            face-recognition-${{ env.VERSION }}-${{ env.os_lower }}.zip
            face-recognition-${{ env.VERSION }}-${{ env.os_lower }}.tar.gz
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: ls -R ./artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          find . -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec sha256sum {} \; > checksums.txt
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./artifacts/**/*.zip
            ./artifacts/**/*.tar.gz
            ./artifacts/checksums.txt
          body: |
            ✅ Release ${{ github.ref_name }}
            🗓️ Date: ${{ github.event.head_commit.timestamp }}
            🔖 Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
